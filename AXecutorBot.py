# AXecutorBot.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
# –§—É–Ω–∫—Ü–∏–∏:
#  ‚Ä¢ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ú–∞—Ä–∞—Ñ–æ–Ω –ø–æ—Å–µ—â–µ–Ω–∏–π –æ—Ñ–∏—Å–∞¬ª
#  ‚Ä¢ /list  ‚Äî –≤—ã—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
#  ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ @–ò–º—è–ë–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ –∂–µ –º–µ–Ω—é
# –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å python-telegram-bot 21.x –∏ Python 3.11‚Äì3.14 (Windows OK)

import asyncio
import logging
import datetime
import hashlib
from typing import Optional
import json
from pathlib import Path
from typing import List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import MessageEntityType
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≥–¥–µ –±—É–¥—É—Ç –ª–µ–∂–∞—Ç—å ID –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
QUOTES_FILE = Path("quotes.json")
ADMIN_IDS = {536451470}

def load_quotes() -> List[str]:
    """
    –ß–∏—Ç–∞–µ—Ç quotes.json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö file_id –∫–∞—Ä—Ç–∏–Ω–æ–∫.
    –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –µ—â—ë –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    if not QUOTES_FILE.exists():
        return []

    with QUOTES_FILE.open("r", encoding="utf-8") as f:
        data = json.load(f)

    # –æ–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É {"quotes": ["file_id1", "file_id2", ...]}
    return data.get("quotes", [])


def save_quotes(quotes: List[str]) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (file_id—à–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫)
    –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ quotes.json.
    """
    with QUOTES_FILE.open("w", encoding="utf-8") as f:
        json.dump(
            {"quotes": quotes},
            f,
            ensure_ascii=False,
            indent=2
        )

def get_today_quote_file_id() -> str:
    """
    –ë–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç –∏–∑ quotes.json,
    –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã,
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë file_id.
    """
    quotes = load_quotes()
    if not quotes:
        return None  # –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã

    # —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ "2025-10-24"
    today_str = datetime.date.today().isoformat()

    # –¥–µ–ª–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö—ç—à —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    digest = hashlib.sha256(today_str.encode("utf-8")).digest()

    # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ —Ö—ç—à–∞ –≤ —á–∏—Å–ª–æ
    num = int.from_bytes(digest[:4], byteorder="big")

    # –±–µ—Ä—ë–º –∏–Ω–¥–µ–∫—Å –ø–æ –º–æ–¥—É–ª—é –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞ —Ü–∏—Ç–∞—Ç
    idx = num % len(quotes)

    return quotes[idx]

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
BOT_TOKEN = "7737583178:AAGv4gBqf_DP2ZjQqrCLWZtIGmiKYYk-LsY"
DOC_URL = "https://docs.google.com/spreadsheets/d/1YmUKSPDKvB8PWE2t2dC-dGy4vk4-9Jl-sWu8pRjknSo/edit?usp=sharing"  # ‚Üê —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞
DOC2_URL = "https://docs.google.com/spreadsheets/d/1HfuY20ysxFNBdfhfkBAFy9ULhH68oQtSKMB-Ljp5xgo/edit?usp=sharing"  # ‚Üê —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞
DOC3_URL = "https://officeflexispace.ru/app/company/80/office/"  # ‚Üê —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞
BUTTON_TEXT = "–ú–∞—Ä–∞—Ñ–æ–Ω –ø–æ—Å–µ—â–µ–Ω–∏–π –æ—Ñ–∏—Å–∞"
BUTTON2_TEXT = "–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≤–∏–∫–æ–∏–Ω–æ–≤"
BUTTON3_TEXT = "–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
BUTTON5_TEXT = "–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"
# ---------------------------------------------

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")

# –ö–µ—à–∏—Ä—É–µ–º username –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
BOT_USERNAME_LOWER: Optional[str] = None

async def addquote_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /addquote:
    - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    - –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º "—è –∂–¥—É –æ—Ç —Ç–µ–±—è –∫–∞—Ä—Ç–∏–Ω–∫—É"
    - –ø—Ä–æ—Å–∏–º —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ
    """
    user_id = update.effective_user.id

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—ã üôÖ")
        return

    # —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –≤ user_data, —á—Ç–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–¥—ë–º —Ñ–æ—Ç–æ
    context.user_data["waiting_for_quote_photo"] = True

    await update.message.reply_text(
        "–û–∫ üëç –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É (—Ñ–æ—Ç–æ) —Å —Ü–∏—Ç–∞—Ç–æ–π, —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é."
    )

async def quote_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –≤—Ö–æ–¥—è—â–µ–µ —Ñ–æ—Ç–æ –∏,
    –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª /addquote, –∑–∞–±–∏—Ä–∞–µ—Ç file_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    """
    user_id = update.effective_user.id

    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å
    if user_id not in ADMIN_IDS:
       # await update.message.reply_text(
       #     "–≠—Ç–æ —Ñ–æ—Ç–æ —è –Ω–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É."
       # )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë–º –ª–∏ –º—ã —Å–µ–π—á–∞—Å —Ñ–æ—Ç–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data.get("waiting_for_quote_photo"):
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /addquote."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ
    photos = update.message.photo
    if not photos:
        await update.message.reply_text(
            "–ú–Ω–µ –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ –ö–ê–†–¢–ò–ù–ö–ê –∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–µ —Å—Ç–∏–∫–µ—Ä üôÇ"
        )
        return

    # –ë–µ—Ä—ë–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ = –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    file_id = photos[-1].file_id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
    quotes = load_quotes()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–¥–æ–±–Ω–æ)
    if file_id in quotes:
        await update.message.reply_text(
            "–≠—Ç–∞ —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ üëå"
        )
        # —Ñ–ª–∞–≥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        context.user_data["waiting_for_quote_photo"] = False
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
    quotes.append(file_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ quotes.json
    save_quotes(quotes)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data["waiting_for_quote_photo"] = False

    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–∫–∞–∂–µ–º –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã
    new_index = len(quotes) - 1

    await update.message.reply_text(
        f"–ì–æ—Ç–æ–≤–æ ‚úÖ –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ü–∏—Ç–∞—Ç—É –∫–∞–∫ #{new_index}.\n"
        f"file_id = {file_id}"
    )

def make_menu_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(BUTTON_TEXT, callback_data="list")],
        [InlineKeyboardButton(BUTTON2_TEXT, callback_data="list2")],
        [InlineKeyboardButton(BUTTON3_TEXT, callback_data="Reserve")],
        [InlineKeyboardButton(BUTTON5_TEXT, callback_data="quote")],
        ]
    return InlineKeyboardMarkup(kb)


# /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É",
        reply_markup=make_menu_keyboard(),
    )


# /list ‚Äî –≤—ã—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É
async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(DOC_URL)

# /list2 ‚Äî –≤—ã—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ç–æ—Ä–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
async def list2_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(DOC_URL_2)

# –ù–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω‚Äë–∫–Ω–æ–ø–∫–∏
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    data = q.data
    if q.data == "list":
        await q.message.reply_text(DOC_URL)
    elif q.data == "list2":
        await q.message.reply_text(DOC2_URL)
    elif q.data == "Reserve":
        await q.message.reply_text(DOC3_URL)
    
    
    elif data == "quote":
        # –∑–¥–µ—Å—å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "—Ü–∏—Ç–∞—Ç–∞ –¥–Ω—è"

        file_id = get_today_quote_file_id()

        if file_id is None:
            # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ quotes.json –ø–æ—á–µ–º—É-—Ç–æ –ø—É—Å—Ç–æ
            await q.message.reply_text("–¶–∏—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ü§∑")
            return

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ file_id
        await q.message.reply_photo(
            photo=file_id
            #caption="–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è ‚ú®"
        )

    else:
        # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–Ω–∞ –±—É–¥—É—â–µ–µ)
        await q.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π ü§î")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
def _mentioned_me(update: Update, bot_username_lower: Optional[str]) -> bool:
    if not update.message or not bot_username_lower:
        return False

    # 1) –ß–µ—Ä–µ–∑ entities (–Ω–∞–¥—ë–∂–Ω–µ–µ –¥–ª—è –≥—Ä—É–ø–ø)
    if update.message.entities:
        text = update.message.text or ""
        for ent in update.message.entities:
            if ent.type in (MessageEntityType.MENTION, MessageEntityType.TEXT_MENTION):
                mention_text = text[ent.offset : ent.offset + ent.length].lower()
                if mention_text in (f"@{bot_username_lower}", bot_username_lower):
                    return True

    # 2) –ó–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å ‚Äî –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    text_lower = (update.message.text or "").lower()
    return (f"@{bot_username_lower}" in text_lower) or (bot_username_lower in text_lower)


# –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
async def mention_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if _mentioned_me(update, BOT_USERNAME_LOWER):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç!", reply_markup=make_menu_keyboard()
        )

async def whoami_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ ADMIN_IDS)."""
    user = update.effective_user
    await update.message.reply_text(
        f"–¢–≤–æ–π Telegram ID: {user.id}\n"
        f"–ò–º—è: {user.full_name}"
    )


async def main() -> None:
    global BOT_USERNAME_LOWER

    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_cmd))
    app.add_handler(CommandHandler("whoami", whoami_cmd))
    app.add_handler(CallbackQueryHandler(on_button))

    app.add_handler(CommandHandler("addquote", addquote_cmd))

    # –ù–û–í–û–ï: –ø—Ä–∏—ë–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ /addquote
    app.add_handler(MessageHandler(
        filters.PHOTO,
        quote_photo_handler
    ))

    # –ö–Ω–æ–ø–∫–∞
    app.add_handler(CallbackQueryHandler(on_button))

    # –°–æ–æ–±—â–µ–Ω–∏—è: –ª–æ–≤–∏–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ)
    from telegram.constants import MessageEntityType

    app.add_handler(
    MessageHandler(
        (filters.TEXT & ~filters.COMMAND)
        | filters.Entity(MessageEntityType.MENTION)
        | filters.Entity(MessageEntityType.TEXT_MENTION),
        mention_handler,
                  )
    )


    # –Ø–≤–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    await app.initialize()

    me = await app.bot.get_me()
    BOT_USERNAME_LOWER = me.username.lower() if me and me.username else None
    logging.info("Bot username: @%s", me.username)

    await app.start()
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏ /start –≤ Telegram (Ctrl+C ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞).")

    # –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.updater.start_polling()
    logging.info("üì° Polling –∑–∞–ø—É—â–µ–Ω.")

    try:
        # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
        await asyncio.Future()
    except asyncio.CancelledError:
        pass
    finally:
        logging.info("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞‚Ä¶")
        await app.updater.stop()
        await app.stop()
        await app.shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass

import asyncio
import logging
import datetime
import hashlib
from typing import Optional, List
import json
from pathlib import Path
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import MessageEntityType
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ================== –ö–û–ù–°–¢–ê–ù–¢–´ / –ù–ê–°–¢–†–û–ô–ö–ò ==================

# –§–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ (file_id –∫–∞—Ä—Ç–∏–Ω–æ–∫)
QUOTES_FILE = Path("quotes.json")

# –ê–¥–º–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /addquote
ADMIN_IDS = {536451470}

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞. –ù–∞ Render –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN,
# –Ω–æ —è –æ—Å—Ç–∞–≤–ª—è—é —Ç–≤–æ—é –ª–æ–≥–∏–∫—É: –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–∞—Ä–¥–∫–æ–¥.
BOT_TOKEN = os.getenv(
    "BOT_TOKEN",
    "7737583178:AAGv4gBqf_DP2ZjQqrCLWZtIGmiKYYk-LsY"
)

DOC_URL = "https://docs.google.com/spreadsheets/d/1YmUKSPDKvB8PWE2t2dC-dGy4vk4-9Jl-sWu8pRjknSo/edit?usp=sharing"
DOC2_URL = "https://docs.google.com/spreadsheets/d/1HfuY20ysxFNBdfhfkBAFy9ULhH68oQtSKMB-Ljp5xgo/edit?usp=sharing"
DOC3_URL = "https://officeflexispace.ru/app/company/80/office/"

BUTTON_TEXT = "–ú–∞—Ä–∞—Ñ–æ–Ω –ø–æ—Å–µ—â–µ–Ω–∏–π –æ—Ñ–∏—Å–∞"
BUTTON2_TEXT = "–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≤–∏–∫–æ–∏–Ω–æ–≤"
BUTTON3_TEXT = "–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
BUTTON5_TEXT = "–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

# –ö–µ—à–∏—Ä—É–µ–º username –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
BOT_USERNAME_LOWER: Optional[str] = None

# ================== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –¶–ò–¢–ê–¢ ==================


def load_quotes() -> List[str]:
    """
    –ß–∏—Ç–∞–µ—Ç quotes.json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö file_id –∫–∞—Ä—Ç–∏–Ω–æ–∫.
    –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –µ—â—ë –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    if not QUOTES_FILE.exists():
        return []

    with QUOTES_FILE.open("r", encoding="utf-8") as f:
        data = json.load(f)

    return data.get("quotes", [])


def save_quotes(quotes: List[str]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ file_id –æ–±—Ä–∞—Ç–Ω–æ –≤ quotes.json.
    """
    with QUOTES_FILE.open("w", encoding="utf-8") as f:
        json.dump(
            {"quotes": quotes},
            f,
            ensure_ascii=False,
            indent=2
        )


def get_today_quote_file_id() -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id "—Ü–∏—Ç–∞—Ç—ã –¥–Ω—è" –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ.
    –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ —Ü–∏—Ç–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.
    """
    quotes = load_quotes()
    if not quotes:
        return None

    today_str = datetime.date.today().isoformat()
    digest = hashlib.sha256(today_str.encode("utf-8")).digest()
    num = int.from_bytes(digest[:4], byteorder="big")
    idx = num % len(quotes)
    return quotes[idx]


# ================== –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ==================


async def addquote_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /addquote:
    - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    - —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ "–∂–¥—É —Ñ–æ—Ç–æ"
    """
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—ã üôÖ")
        return

    context.user_data["waiting_for_quote_photo"] = True

    await update.message.reply_text(
        "–û–∫ üëç –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É (—Ñ–æ—Ç–æ) —Å —Ü–∏—Ç–∞—Ç–æ–π, —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é."
    )


async def quote_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ /addquote, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ file_id –≤ quotes.json
    """
    user_id = update.effective_user.id

    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å
    if user_id not in ADMIN_IDS:
        # —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∫—É
        return

    # –º—ã –≤–æ–æ–±—â–µ –∂–¥–∞–ª–∏ —Ñ–æ—Ç–æ?
    if not context.user_data.get("waiting_for_quote_photo"):
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /addquote."
        )
        return

    photos = update.message.photo
    if not photos:
        await update.message.reply_text(
            "–ú–Ω–µ –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ –ö–ê–†–¢–ò–ù–ö–ê –∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–µ —Å—Ç–∏–∫–µ—Ä üôÇ"
        )
        return

    file_id = photos[-1].file_id

    quotes = load_quotes()

    if file_id in quotes:
        await update.message.reply_text(
            "–≠—Ç–∞ —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ üëå"
        )
        context.user_data["waiting_for_quote_photo"] = False
        return

    quotes.append(file_id)
    save_quotes(quotes)

    context.user_data["waiting_for_quote_photo"] = False

    new_index = len(quotes) - 1
    await update.message.reply_text(
        f"–ì–æ—Ç–æ–≤–æ ‚úÖ –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ü–∏—Ç–∞—Ç—É –∫–∞–∫ #{new_index}.\n"
        f"file_id = {file_id}"
    )


def make_menu_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(BUTTON_TEXT, callback_data="list")],
        [InlineKeyboardButton(BUTTON2_TEXT, callback_data="list2")],
        [InlineKeyboardButton(BUTTON3_TEXT, callback_data="Reserve")],
        [InlineKeyboardButton(BUTTON5_TEXT, callback_data="quote")],
    ]
    return InlineKeyboardMarkup(kb)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    """
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É",
        reply_markup=make_menu_keyboard(),
    )


async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /list ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
    """
    await update.message.reply_text(DOC_URL)


async def list2_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /list2 ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É
    """
    await update.message.reply_text(DOC2_URL)


async def whoami_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π Telegram ID (–¥–ª—è ADMIN_IDS)
    """
    user = update.effective_user
    await update.message.reply_text(
        f"–¢–≤–æ–π Telegram ID: {user.id}\n–ò–º—è: {user.full_name}"
    )


# ================== –ö–ù–û–ü–ö–ò / CALLBACK DATA ==================


async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()

    data = q.data

    if data == "list":
        await q.message.reply_text(DOC_URL)

    elif data == "list2":
        await q.message.reply_text(DOC2_URL)

    elif data == "Reserve":
        await q.message.reply_text(DOC3_URL)

    elif data == "quote":
        file_id = get_today_quote_file_id()

        if file_id is None:
            await q.message.reply_text("–¶–∏—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ü§∑")
            return

        await q.message.reply_photo(
            photo=file_id,
            # caption="–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è ‚ú®",
        )

    else:
        await q.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π ü§î")


# ================== –£–ü–û–ú–ò–ù–ê–ù–ò–ï –ë–û–¢–ê ==================


def _mentioned_me(update: Update, bot_username_lower: Optional[str]) -> bool:
    if not update.message or not bot_username_lower:
        return False

    # (1) –ß–µ—Ä–µ–∑ entities (–Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö)
    if update.message.entities:
        text = update.message.text or ""
        for ent in update.message.entities:
            if ent.type in (
                MessageEntityType.MENTION,
                MessageEntityType.TEXT_MENTION,
            ):
                mention_text = text[ent.offset: ent.offset + ent.length].lower()
                if mention_text in (
                    f"@{bot_username_lower}",
                    bot_username_lower,
                ):
                    return True

    # (2) fallback ‚Äî –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
    text_lower = (update.message.text or "").lower()
    return (
        f"@{bot_username_lower}" in text_lower
        or bot_username_lower in text_lower
    )


async def mention_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if _mentioned_me(update, BOT_USERNAME_LOWER):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç!",
            reply_markup=make_menu_keyboard(),
        )


# ================== MAIN ==================


async def main() -> None:
    global BOT_USERNAME_LOWER

    # —Å–æ–∑–¥–∞—ë–º Application —á–µ—Ä–µ–∑ ApplicationBuilder (PTB 20.x —Å—Ç–∏–ª—å)
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_cmd))
    app.add_handler(CommandHandler("list2", list2_cmd))
    app.add_handler(CommandHandler("whoami", whoami_cmd))
    app.add_handler(CommandHandler("addquote", addquote_cmd))

    # —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ /addquote
    app.add_handler(MessageHandler(filters.PHOTO, quote_photo_handler))

    # callback-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(on_button))

    # —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
    app.add_handler(
        MessageHandler(
            (filters.TEXT & ~filters.COMMAND)
            | filters.Entity(MessageEntityType.MENTION)
            | filters.Entity(MessageEntityType.TEXT_MENTION),
            mention_handler,
        )
    )

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑, —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ BOT_USERNAME_LOWER
    me = await app.bot.get_me()
    BOT_USERNAME_LOWER = me.username.lower() if me and me.username else None
    logging.info("Bot username: @%s", me.username if me else "<?>")

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ñ–¥—É –∞–ø–¥–µ–π—Ç–æ–≤...")

    # –í–ê–ñ–ù–û:
    # run_polling —Å–∞–º:
    # - —Å–Ω–∏–º–µ—Ç –≤–µ–±—Ö—É–∫
    # - –∑–∞–ø—É—Å—Ç–∏—Ç long polling
    # - –±—É–¥–µ—Ç –¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    # –Ω–∏–∫–∞–∫–∏—Ö app.initialize(), app.start(), app.updater.* –Ω–µ –Ω—É–∂–Ω–æ
    await app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
